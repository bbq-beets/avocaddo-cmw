name: Android CI/CD
on:
  workflow_call:
    inputs:
      package-name:
        description: "The Android package name from the app manifest"
        required: true
        type: string
      track:
        description: "The Play Store track to release to (internal, alpha, beta, production)"
        required: true
        type: string
      push-changes:
        description: 'Whether commit and push the created fastlane configuration'
        required: false
        default: false
        type: boolean
      git-user-name:
        description: 'Required when push-changes is set, the git user.name'
        required: false
        type: string
      git-user-email:
        description: 'Required when push-changes is set, the git user.email'
        required: false
        type: string
    secrets:
      keystore:
        description: 'Base64 encoded Android keystore'
        required: true
      keystore-password:
        description: "The keystore password"
        required: true
      key-alias:
        description: "The alias of the signing key"
        required: true
      key-password:
        description: "The password of the signing key"
        required: true
      play-store-creds:
        description: 'Your Play Store credentials'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build & ship the app
    steps:
      - name: Set up Java
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Check out Mobile CI/CD
        uses: actions/checkout@v2
        env:
          MOBILE_CI_CD_DIR: mobile-ci-cd
        with:
          path: ${{ env.MOBILE_CI_CD_DIR }}
      - name: Check out caller repository
        uses: actions/checkout@v2
        env:
          PROJECT_ROOT: caller-repo
        with:
          #TODO ${{ inputs.repository }} or can we grab this from some environment variable?
          repository: bbq-beets/octo-game
          path: ${{ env.PROJECT_ROOT }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Bundle install
        run: |
          PROJECT_ROOT=$GITHUB_WORKSPACE/$PROJECT_ROOT
          MOBILE_CI_CD_DIR=$GITHUB_WORKSPACE/$MOBILE_CI_CD_DIR
          echo "We're now here:"
          pwd
          echo "Now going to $PROJECT_ROOT"
          cd $PROJECT_ROOT
          echo "What's here?"
          ls
          sudo gem install bundler && bundle install
      - name: Do the work
        run: |
          FASTLANEDIR=$PROJECT_ROOT/fastlane
          SECRETS_DIR=/secrets
          JSON_KEY_FILE=$SECRETS_DIR/play-store-credentials.json
          KEYSTORE_FILE=$SECRETS_DIR/keystore.jks

          PACKAGE_NAME=${{ inputs.package-name }}
          TRACK=${{ inputs.track }}
          KEY_PASSWORD=${{ secrets.key-password }}
          KEY_ALIAS=${{ secrets.key-alilas }}
          KEYSTORE_PASSWORD=${{ secrets.keystore-password }}

          cd $PROJECT_ROOT

          mkdir $SECRETS_DIR

          if [[ ! -f "Gemfile" ]]; then
              echo "Copying Gemfile"
              cp ./$MOBILE_CD_CD_DIR/Gemfile Gemfile
          else
              # Add fastlane to the exising gemfile if it isn't referenced (including as a dependency)
              if ! bundle list | grep 'fastlane'; then
                  bundle add fastlane
              else
                  echo "Gemfile already exists and already references fastlane; not taking any action"
              fi
          fi

          if [[ ! -d "$FASTLANEDIR" ]]; then
              echo "Creating $FASTLANEDIR dir"
              mkdir $FASTLANEDIR
          else
              echo "$FASTLANEDIR directory already exists"
          fi

          if [[ ! -f "Appfile" ]]; then
              echo "Creating Appfile"
              touch $FASTLANEDIR/Appfile
              echo "${{ secrets.play-store-creds }}" > $JSON_KEY_FILE
              echo 'json_key_file("'$JSON_KEY_FILE'")' >> $FASTLANEDIR/Appfile
              echo 'package_name("${{ secrets.package_name }}")' >> $FASTLANEDIR/Appfile
          else
              echo "Appfile already exists; not taking any action"
          fi

          if [[ ! -f "Fastfile" ]]; then
              echo "Copying Fastfile"
              cp /$MOBILE_CI_CD_DIR/Fastfile $FASTLANEDIR/Fastfile
          else
              echo "Fastfile already exists; not taking any action"
          fi

          if [[ ! -f "Pluginfile" ]]; then
              echo "Copying Pluginfile"
              cp /$MOBILE_CI_CD_DIR/Pluginfile $FASTLANEDIR/Pluginfile
          else
              echo "Pluginfile already exists; TODO add the plugin we need if it isn't in there"
          fi

          echo "Running Bundler"
          bundle install

          echo "${{ secrets.keystore }}" | base64 --decode > $KEYSTORE_FILE

          # Run fastlane
          bundle exec fastlane android deploy

          # TODO always clean up, also in case of failure
          rm -r $SECRETS_DIR

          # Commit and push specific changes
          if [[ ${{ inputs.push-changes }} ]]; then
              git config --global user.name ${{ inputs.git-user-name }}
              git config --global user.email ${{ inputs.git-user-email }}
              # TODO do we care which branch we're on?
              # TODO do we want to commit Gemfile.lock?
              git add $PROJECT_ROOT/Gemfile
              git add $FASTLANEDIR/Appfile
              git add $FASTLANEDIR/Fastfile
              git add $FASTLANEDIR/Pluginfile
              git commit -m "Configure fastlane"
              # TODO We probably don't have the right to push...
          fi

